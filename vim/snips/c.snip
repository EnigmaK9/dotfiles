snippet     basic1
options     head
abbr        main()
	#include <stdio.h>${1}

	int main(void)
	{
		${0}
	}

snippet     basic2
options     head
abbr        int main(...)
	#include <stdio.h>
	#include <stdlib.h>${1}

	int main(int argc, char * argv[])
	{
		${0}

		return EXIT_SUCCESS;
	}

snippet     complete
options     head
abbr        int main(...) { EXIT... }
	#include <stdio.h>
	#include <stdlib.h>${1}

	void display_usage(void);
	void print_error(const char *);

	int main(int argc, char **argv)
	{
		if (argc < ${2:2}) {
			display_usage();
			return EXIT_SUCCESS;
		}
		${0}

		return EXIT_SUCCESS;
	}

	void display_usage(void)
	{
		puts("${3}");
		return;
	}

	void print_error(const char * message)
	{
		fprintf(stderr, "%s", message);

		exit(EXIT_FAILURE);
	}

snippet     puts
alias p
    puts(${1})

snippet     fputs
alias fp
    fputs(${1}, ${2:stderr})

snippet     if
options     head
abbr        if () {}
    if (${1:#:condition}) {
        ${0:TARGET}
    }

snippet else
options     head
abrr else {}
    else {
        ${0:TARGET}
    }

snippet elseif
options     head
    else if (${1:#:condition}) {
        ${0:TARGET}
    }

snippet     ifelse
options     head
abbr        if () {} else {}
    if (${1:#:condition}) {
        ${2:TARGET}
    } else {
        ${3}
    }

snippet     fori
abbr        for (int i; ...; ++i) {}
    for (int ${1:i} = 0; $1 < ${2}; ++$1) {
        ${0:#:TARGET}
    }

snippet     forri
abbr        for (int i; ...; --i) {}
    for (int ${1:i} = ${2}; $1 >= 0; --$1) {
        ${0:#:TARGET}
    }

snippet     for
options     head
abbr        for () {}
    for (${1:int }${2:i} = ${3:0}; $2 < ${4}; $2${5}) {
        ${0:#:TARGET}
    }

snippet     while
options     head
abbr        while () {}
    while (${1:#:condition}) {
        ${0:TARGET}
    }

snippet     do_while
options     head
alias       do
    do {
        ${0:TARGET:code}
    } while (${1:#:condition});

snippet     switch
options     head
abbr        switch () {}
	switch (${1:#:var}) {
	  case ${2:#:val}:
		${3:TARGET}
		break;

	  default:
		${0:TARGET}
		break;
	}

snippet     case
options     head
abbr        case: break;
	case ${1}:
	  ${2}
	  break;

snippet     function
options     head
alias       func
abbr        func() {}
    ${1:void} ${2:#:func_name}(${3:#:args})
    {
        ${0:TARGET}
    }

snippet     struct
options     head
abbr        struct {}
    struct ${1:#:name} {
        ${0:TARGET:data}
    };

# Typedef struct
snippet struct_typedef
options     head
alias   typedef_struct
    typedef struct ${1:#:name} {
        ${0:TARGET:data}
    };

snippet     enum
options     head
abbr        enum {}
    enum ${1:#:name} {
        ${0:TARGET}
    };

# hard-tab is necessary; C indent doesn't support this.
snippet main1
options head
	int main(void)
	{
		${0:TARGET}
	}


snippet main2
options     head
	int main(int argc, char * argv[])
	{
		${0:TARGET}
	}

# #include <...>
snippet inc
options     head
alias   #inc, #include
    #include <${1:stdio}.h>

# #include "..."
snippet inc2
options     head
alias   #inc2, #include2
    #include "${1}.h"

snippet #if
options head
    #if ${1}
    ${0}
    #endif

snippet ifdef
options head
    #if defined(${1})
    ${0}
    #endif // $1

snippet ifndef
options head
    #if !defined(${1})
    ${0}
    #endif // $1

snippet include_once
options head
alias   once
abbr #ifndef ... #define ... #endif
    #ifndef ${1:#:SYMBOL}
    #define $1
    ${2}
    #endif /* $1 */

snippet def
options     head
alias   #def, #define
    #define

# Ternary conditional operator
snippet conditional
    (${1:#:condition}) ? ${2:#:a} : ${3:#:b}

snippet typedef
    typedef ${1:#:base_type} ${2:#:custom_type};

snippet printf
abbr    printf("...\n", ...);
    printf("${1}\n"${2})

snippet fprintf
abbr    fprintf(..., "...\n", ...);
    fprintf(${1:stderr}, "${2}\n"${3})

snippet scanf
abbr    scanf("...",...);
    scanf("${1}", ${2})

snippet fscanf
abbr    fscanf("...",...);
    fscanf(${1:archivo}, "${2}", ${3})

snippet comment
alias /*
    /* ${1:#:comment} */
    ${0}

snippet sizeof
alias size
    sizeof(${0:TARGET})

snippet helloworld
options     head
alias   holamundo
    #include <stdio.h>
    int main(int argc, char const* argv[])
    {
        puts("Â¡Hola, Mundo!");
        return 0;
    }

snippet fopen
abbr fopen("...", "...");
    fopen("${1:PATH}", "${2:MODE}");
    ${0:TARGET}
    fclose(${3:FD});

snippet fgets
abbr fgets(row, length, file);
    fgets(${0:ROW}, ${1:LENGTH}, ${2:FILE});

snippet     doxy
abbr        /** @brief ...
options     head
    /**
     * @brief    ${1:function description}
     *
     * @details  ${2:detailed description}
     *
     * @param    ${3:param}
     *
     * @return   ${4:return type}
     */
