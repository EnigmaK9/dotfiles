" ConfiguraciOn vim
set nocompatible
scriptencoding utf-8
filetype off

" ConfiguraciOn texto y navegaciOn
set number
set relativenumber " NumeraciOn de lIneas desde tu posiciOn actual
set linebreak
set showbreak=...\              " Se muestran 3 puntos para simbolizar continuaciOn
if has("patch-7.4.354") || has('nvim')
    set breakindent
endif
set textwidth=100
set showmatch
set matchpairs+=¡:!
set visualbell
set ruler

" ConfiguraciOn para la busqueda
set hlsearch
set smartcase
set ignorecase
set incsearch

" Ex menU
"set path+=**       " BUsqueda recursiva de archivos
set wildmenu        " Se pueden visualizar las opciones con tab

" ConfiguraciOn para el indentado automAtico
set autoindent
set smarttab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

" RepresentaciOn de los carActeres invisibles
set list
set listchars=tab:▸\ ,trail:⋅,extends:❯,precedes:❮

" Guias visuales, se resalta la lInea y columna actuales y la columna 80
set cursorline
set cursorcolumn
set colorcolumn=80

" Extras
set autowrite
set spelllang=es
set spell
set undolevels=1000
set backspace=indent,eol,start
set splitright
set splitbelow
set nrformats+=alpha
if has('conceal')
    set concealcursor=
endif

" Fijar la ruta en tiempo de ejecuciOn para incluir Vundle e inicializarlo
if 0    " Inicio de la zona desactivada
    set runtimepath+=~/.vim/bundle/Vundle.vim
    call vundle#begin()

    " Permitir que Vundle administre Vundle (requerido)
    Plugin 'VundleVim/Vundle.vim'

    " Mejoras en la ediciOn y movimiento
    Plugin 'scrooloose/nerdtree.git'        " Arbol de directorios
    Plugin 'kshenoy/vim-signature'          " Marcas sobre lIneas
    Plugin 'matchit.zip'                    " Moverse entre etiquetas html
    Plugin 'PeterRincker/vim-argumentative' " Objeto de texto 'argumento'
    Plugin 'vim-indent-object'              " Objeto de texto 'indentado'
    Plugin 'kana/vim-textobj-user'          " Definir objetos de texto
    Plugin 'kana/vim-textobj-line'          " Objeto de texto 'lInea'
    Plugin 'kana/vim-textobj-function'      " Objeto de texto 'funciOn'
    Plugin 'glts/vim-textobj-comment'       " Objeto de texto 'comentario'
    Plugin 'kana/vim-textobj-entire'        " Objeto de texto 'todo'
    Plugin 'jiangmiao/auto-pairs'           " Completar pares de sImbolos
    Plugin 'tpope/vim-surround'             " Encerrar / liberar secciones
    Plugin 'The-NERD-Commenter'             " Comentar / des-comentar
    Plugin 'tpope/vim-commentary'           " Comentar / des-comentar
    Plugin 'ReplaceWithRegister'            " Manejo de registros
    Plugin 'tpope/vim-repeat'               " Repetir plugins con .
    Plugin 'christoomey/vim-system-copy'    " Copiar a la papelera del sistema
    Plugin 'Tabular'                        " Alinear cOdigo
    Plugin 'junegunn/vim-easy-align'        " ''' '''

    " Sintaxis para los elementos semAnticos
    Plugin 'sheerun/vim-polyglot'           " Sintaxis de varios lenguajes
    Plugin 'Beerstorm/vim-brainfuck'        " Sintaxis de brainfuck

    " Todos los plugins deben ir antes de la siguiente lInea
    call vundle#end()
    filetype plugin indent on

    " ConfiguraciOn de easy-align
    xmap ga <Plug>(EasyAlign)
    nmap ga <Plug>(EasyAlign)

    " ConfiguraciOn de AutoPairs (carActeres de apertura y cierre)
    let g:AutoPairs = {
                \ '(' : ')',
                \ '[' : ']',
                \ '{' : '}',
                \ '"' : '"',
                \ "'" : "'",
                \ '¿' : '?',
                \ '¡' : '!'
                \}

endif " Fin de la zona desactivada

" Funciones {
function! VerMarcas()
    syntax enable
endfunction

function! DoblarFunciones()
    set foldmethod=syntax
    set foldnestmax=1
endfunction

function! ModoDificil()
    inoremap <Esc>   <NOp>

    inoremap <Up>    <NOp>
    inoremap <Down>  <NOp>
    inoremap <Left>  <NOp>
    inoremap <Right> <NOp>

    nnoremap <Up>    <NOp>
    nnoremap <Down>  <NOp>
    nnoremap <Left>  <NOp>
    nnoremap <Right> <NOp>

    nnoremap h       <NOp>
    nnoremap j       <NOp>
    nnoremap k       <NOp>
    nnoremap l       <NOp>

    set norelativenumber
endfunction

function! Ejecutar()
    if len(getqflist()) == 0        " Run the program
        if (&filetype == 'c' || &filetype == 'cpp')
            !./%:t:r
        elseif (&filetype == 'java')
            !java %:t:r
        elseif (&filetype == 'python')
            !python3 %
        elseif (&filetype == 'sh')
            !bash %
        endif
    else
        copen
        setlocal nospell
    endif
endfunction

" Definiendo el make
augroup makecomnads
    autocmd!
    autocmd Filetype c          setlocal makeprg=gcc\ %\ -std=c11\ -o\ %:t:r\ -Wall\ -lm
    autocmd Filetype cpp        setlocal makeprg=g++\ %\ -std=c++17\ -o\ %:t:r\ -Wall\ -Wextra\ -lm
    autocmd Filetype java       setlocal makeprg=javac\ %
    autocmd Filetype html       setlocal makeprg=xdg-open\ %
    autocmd Filetype python     setlocal makeprg=flake8\ %
    autocmd Filetype cs         setlocal makeprg=mcs\ %
    autocmd Filetype sh         setlocal makeprg=bash\ -n\ %
augroup END

" Definiendo configuraciOnes especificas para cada tipo de archivos
augroup fileconfig
    autocmd!
    autocmd BufEnter *.nasm setlocal filetype=nasm
    autocmd BufEnter *.jade setlocal filetype=pug
    autocmd BufEnter *.h setlocal filetype=c
    autocmd Filetype html,xml,jade,pug,htmldjango,css,scss,sass,php imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")
    autocmd Filetype html,css,scss,sass,pug,php setlocal ts=2 sw=2 sts=2
augroup END
" }

" Mapeos {

" Mapeos bAsicos
let mapleader = "\,"
nnoremap Q <nop>
inoremap kj <Esc>
nnoremap <C-k> -l
nnoremap <C-j> +l
nnoremap <space> za
nnoremap Y y$
nmap <leader>ff zfaf
nnoremap <leader>cbox :Tabularize /*<cr>vip<Esc>:substitute/ /=/g<cr>r A/<Esc>vipo<Esc>0r/:substitute/ /=/g<cr>:nohlsearch<cr>
nnoremap <leader>r :%s/\<<C-r>=expand("<cword>")<CR>\>\C//g<Left><Left>
nnoremap <leader>R :%s/\<<C-r>=expand("<cWORD>")<CR>\>\C//g<Left><Left>
inoremap <leader>pk <Esc>:VCoolor<Return>a
inoremap <leader>scp <Esc>:!gpick<Return>a

" Para modificar fácilmente este archivo
nnoremap <leader>av :tabnew $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" Abreviaciones
iabbrev fro for
iabbrev lenght length
iabbrev widht  width
iabbrev heigth height
iabbrev prt    ptr
iabbrev tis    this
iabbrev tihs   this
iabbrev form   from

" Manejo de ventanas
nnoremap \| :vsplit<space>
nnoremap _ :split<space>

" Manejo de tabulaciones
nnoremap <leader>tn :tabnew<Space>

nnoremap <leader>tk :tabnext<CR>
nnoremap <leader>tj :tabprev<CR>
nnoremap <leader>th :tabfirst<CR>
nnoremap <leader>tl :tablast<CR>

" Movimiento estilo emacs
cnoremap <C-a> <Home>
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
cnoremap <C-d> <Delete>
cnoremap <M-b> <S-left>
cnoremap <M-f> <S-right>
cnoremap <M-d> <S-right><C-w>

" Escribir archivos que requieren sudo
cnoremap w!! w !sudo tee % >/dev/null
" Evitar el uso errOneo de mayUsculas
" al intentar salir o guardar un archivo
cnoremap Q q
cnoremap W w
cnoremap WW W
cnoremap QQ Q

" Mapeos de modo terminal neovim
if has('nvim')
    nnoremap <leader>ot :5sp<CR>:te<CR><C-\><C-n>:setlocal nospell<CR>A
    tnoremap <Esc> <C-\><C-n>
    tmap     kj    <Esc>
endif

" Abrir fAcilmente el Arbol de directorios
noremap <F5> :NERDTreeToggle<Return>

" CorrecciOn de errores en el mismo archivo
noremap <F9> :make<Return>:call Ejecutar()<Return>
